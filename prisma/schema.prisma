generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  firstName    String      @default("Josh")
  lastName     String      @default("Wilkinson")
  email        String      @unique
  phoneNumber  String?
  role         String      @default("patient")
  Patient      Patient?
  Staff        Staff?
  Pharmacist   Pharmacist?
  lastLoggedIn DateTime    @default(now()) @map(name: "last_logged_in")
  createdAt    DateTime    @default(now()) @map(name: "created_at")
  updatedAt    DateTime    @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model Patient {
  id            Int            @id @unique @default(autoincrement())
  userId        String         @unique
  User          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  pickupEnabled Boolean        @default(false) @map(name: "pickup_enabled")
  dob           String?        @map(name: "date_of_birth")
  Prescriptions Prescription[]

  @@map(name: "patients")
}

model Pharmacist {
  id           Int            @id @unique @default(autoincrement())
  userId       String         @unique
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  isAdmin      Boolean        @default(false) @map(name: "is_admin")
  isOnDuty     Boolean        @default(false) @map(name: "is_on_duty")
  Location     Location?      @relation(fields: [locationId], references: [id])
  locationId   Int?
  Staff        Staff[]
  Prescription Prescription[]

  @@map(name: "pharmacist")
}

model Staff {
  id           Int            @id @unique @default(autoincrement())
  userId       String         @unique
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  isAdmin      Boolean        @default(false) @map(name: "is_admin")
  isAuthorized Boolean        @default(false) @map(name: "is_authoized")
  Location     Location?      @relation(fields: [locationId], references: [id])
  locationId   Int?
  authorizer   Pharmacist?    @relation(fields: [pharmacistId], references: [id])
  pharmacistId Int?
  Prescription Prescription[]

  @@map(name: "staff")
}

model Prescription {
  id           Int         @id @unique @default(autoincrement())
  name         String
  status       String      @default("Unfilled")
  pickupTime   DateTime?
  Patient      Patient?    @relation(fields: [patientId], references: [id])
  patientId    Int
  balance      Float
  Location     Location    @relation(fields: [locationId], references: [id])
  LockerBox    LockerBox   @relation(fields: [lockerBoxId], references: [id])
  locationId   Int
  lockerBoxId  Int
  pickupCode   String
  Pharmacist   Pharmacist? @relation(fields: [pharmacistId], references: [id])
  pharmacistId Int?
  Staff        Staff?      @relation(fields: [staffId], references: [id])
  staffId      Int?

  @@map(name: "prescriptions")
}

model Location {
  id                Int            @id @unique @default(autoincrement())
  streetAddress     String         @default("")
  cardinalDirection String?
  city              String         @default("")
  province          String         @default("")
  country           String         @default("")
  phoneNumber       String         @default("")
  Prescriptions     Prescription[]
  LockerBoxes       LockerBox[]
  Staff             Staff[]
  Pharmacist        Pharmacist[]

  @@map(name: "locations")
}

model LockerBox {
  id            Int            @id @unique @default(autoincrement())
  label         Int
  status        String
  Location      Location       @relation(fields: [locationId], references: [id])
  locationId    Int
  Prescriptions Prescription[]

  @@unique(fields: [label, locationId], name: "specificLockerBox")
  @@map(name: "locker_box")
}
